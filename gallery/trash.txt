# Create your models here.
class BasePhoto(models.Model):
    photo = models.ImageField(upload_to=get_directory)
    photo_medium = models.ImageField(upload_to=get_directory,
                                     blank=True,
                                     null=True,
                                     editable=False,
                                     )
    photo_min = models.ImageField(upload_to=get_directory,
                                  blank=True,
                                  null=True,
                                  editable=False,
                                  )

    def save(self, *args, **kwargs):

        # resize the image
        if self.photo:
            img = PILImage.open(self.photo)
            x_mid = 900
            y_mid = 600
            x_min = 600
            y_min = 400

            if img.mode != "RGB":
                img.convert('RGB')
            elif img.mode =="RGBA":
                raise Exception("Musisz wrzuciÄ‡ format JPG")

            #get current size of main photo
            width, height = img.size
            ratio = width / height

            # make 2 different variables for min and medium photo
            img_min, img_mid = img, img

            def custom_size(my_x,my_y):
                if width > my_x or height > my_y:
                    if width >= height:
                        my_y = int(my_x / ratio)
                        return (my_x, my_y)
                    elif height > width:
                        return (int(my_y * ratio), my_y)
                else:
                    return( width, height)

            img_min.thumbnail(custom_size(x_min,y_min), PILImage.ANTIALIAS)
            img_mid.thumbnail(custom_size(x_mid,y_mid), PILImage.ANTIALIAS)

            # img_mid.thumbnail((width_mid,height_mid), PILImage.ANTIALIAS)

            save_buff = BytesIO()
            img_min.save(save_buff,
                        format="JPEG",
                        optimize=True,
                        quality=80
            )

            self.photo_min = InMemoryUploadedFile(
                save_buff,
                'ImageField',
                "%s.jpg" % self.photo.name.split('.')[0],
                'image/jpeg',
                save_buff.__sizeof__(),
                None
            )

            img_mid.save(save_buff,
                        format="JPEG",
                        optimize=True,
                        quality=80
            )

            self.photo_medium = InMemoryUploadedFile(
                save_buff,
                'ImageField',
                "%s.jpg" % self.photo.name.split('.')[0],
                'image/jpeg',
                save_buff.__sizeof__(),
                None
            )

        super().save(*args, **kwargs)

    class Meta:
       abstract = True